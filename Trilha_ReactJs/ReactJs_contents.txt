Operator Spread
	Por exemplo, sendo usado para espalhar um array ou objeto.
	Ex:		const newArray = [ ...oldArray, 1, 2 ];
			const newObject = { ...oldObject, newProperty: 5 };

	Outro exemplo:
	const person = {
		name: "Everson"
	}

	const newPerson = {
		...person,
		age: 22
	}

	constole.log(newPerson) // retorna {age: 28, name: "Everson" }
Operador Rest
	Aqui, ele está sendo esando para unir uma lista de argumentos de uma função em um array.
	Ex:   	function sortArgs( ...args ) {
				return args.sort();
			}
  
	Outro exemplo:
	const filtro = (...args) => {
		return args.filter( (item) => item === 1 );
	}

	console.log(filtro(1, 2, 3)) // retorna [1]

Herança - evitando os problemas de atribuição de uma variável à outra.
	Ex:   	const person = {
				name: "Everson"
			};

			const secondPerson = {
				...person
			}

			person.name = "Vinicius";

			console.log(secondPerson) // retorna Vinicius;
  
	Essa é uma forma mais eficaz de atribuir o valor de uma variável à outra, garantindo que devido ao sistema de herença, ao editar uma variável, isso não interfica na outra.
	
Array
	find()
		É um método de array que retorna o valor do primeiro elemento que passa em um teste (uma condição). Esse método executa uma função anônima em cada elemento do array. Esse método retorna "undefined" se nenhum elemento estiver de acordo com a condição. E esse método não executa em elementos vazios e ele não muda o array original.
		
		Syntax: 	myArray.find( function( currentItem, index, array ), thisValue )
		
			- currentItem: O elemento atual durante o mapeamento do array. (Obrigatório)
			- index: O indice do elemento atual em relação ao array (óbvio). (Opcional)
			- array: O array do elemento atual. (Opcional)
			- thisValue: É um parâmetro opcional, ele é o valor passado para a função como sendo o "this" value.
			
	findIndex()
		Faz a mesma coisa que o find(), só que ao invés de retornar o primeiro valor que é aprovado pela condição, ele retorna o índice desse elemento. Além de tudo, ele retorna "-1" se nenhum elemento do array preencher o requisito. Ele não executa em arrays vazios e ele não muda o array original.
		
		Syntax: 	myArray.findIndex( function( currentItem, index, array ) thisValue )
		
			- currentItem: O elemento atual durante o mapeamento do array. (Obrigatório)
			- index: O indice do elemento atual em relação ao array (óbvio). (Opcional)
			- array: O array do elemento atual. (Opcional)
			- thisValue: É um parâmetro opcional, ele é o valor passado para a função como sendo o "this" value.
			
** Não fique repetindo o mesmo código várias e várias vezes **
** Nâo atribua muitas tarefas à uma mesma função, distribua as tarefas em outras pequenas funções **
** Espalhar grandes blocos de códigos em múltiplas funções pequenas **

- Lifting the state up

Hooks
	useRef( )
	
	useEffect( )
		useEffect( <function>, [ dependencies ] );
		
		Ele nos permite executar side effects nos componentes. Alguns exemplos de side effect: fetching data, atualizar diretamente o DOM, e temporizadores. O useEffect recebe dois argumentos, sendo o segundo opcional. Mas tem um detalhe importante, o useEffect será executado sempre que o componente que ele estiver, for renderizado ou sofrer alguma alteração, o que acaba causando outro efeito.
		
		Ex: 	import { useState, useEffect } from "react";
				import ReactDom from "react-dom";
				
				function Timer( ) {
					const [ count, setCount ] = useState(0);
					
					useEffect( ( ) => {
						let timer = setTimeout( ( ) => {
							setCount( (count) => count + 1);
						} , 1000);
						
					/*
						Outra forma de parar essa repetição, seria retornar uma função com o método "clearTimeout()", mas precisa estar dentro da função do useEffect( ). Pode ser o retorno da função que é passada dentro desse hook. 
						
						OBS: Podemos até usar o setTimeout() sem atribuir à nenhuma variável, mas para poder parar sua ativação, precisamos passar atribuir à uma variável "timer".
					*/	
						Ex: 	return ( ) => clearTimeout( timer );
						
					} ,  [ ]);
					

					
					return <h1>I've rendered { count } times! </h1>;
				}
				
				ReactDOM.render(<Timer />, document.getElementById("root"));
				
		Nesse exemplo do da função Timer, o useEffect será acionado sempre que a função "setTimeout()" for executada, porém ela é executada a cada 1000 milisegundos, então o useEffect será ativado nessa mesma frequência.
		
		Mas esse comportamento de ficar sem auto invocando o tempo todo não é o ideal, isso pode gerar um loop infinito e consumir toda a memória da aplicação, podendo travar o software. Devemos sempre incluir um segundo parâmetro ao qual recebe um array. Podemos, opcionalmente, passar algumas dependências para o useEffect, colocando dentro do array.
		
		Ex: 	useEffect( ( ) => {
					// Executa apenas na primeira renderização. Isso por conta do array passado em segundo parâmetro.
				} , [ ])
				
		Ex: 	useEffect( ( ) => {
					// Executa apenas na primeira renderização.
					// E também será executado se alguma variável ou estado, que for passado por "dependência" for alterado.
				} , [ prop, state ])
		
		Ex: 	import { useState, useEffect } from 'react';
				import ReactDOM from 'react-dom';
				
				function Counter( ) {
					const [ count, setCount ] = useState(0);
					const [ calculation, setCalculation ] = useState(0);
					
					useEffect( ( ) => {
						setCalculation( ( ) => count * 2 );
					} , [ count ]) // adicionou a variável "count" aqui.
					
					return  (
						<>
							<p>Count: { count }</p>
							<button onClick={ ( ) => setCount( ( c ) => c + 1 ) }> + </button>
							<p>Calculation: { calculation } </p>
						</>
					);
				}
				
				ReactDom.render(<Counter />, document.getElementById('root'));
	
	useReducer( )
		Ele é parecido com o useState. Serve para costumizar estados lógicos. Ele é extremamente útil para lidar com múltiplos pedaços de estados que estão trabalhando por trás de uma lógica um pouco mais complexa. Esse hook recebe dois argumentos:
		
			useReducer( < reducer >, < initialState > )
		
		ou 
			
			const [ state, dispatchFn ] = useReducer( reducerFn, initialState, initFn )
			
			legenda: 
				Fn = function
			
		O a função "reducer" contém o estado lógico customizado  e  o "initialState" pode ser um simples valor, mas normalmente contém um objeto. 
		
		O "useReducer" vai retornar o "state" atual e um  método "dispatch" (despacho)
		
		Ex: 	import { useReducer } from "react";
				import ReactDOM from "react-dom";
				const initialTodos = [
					{
						id: 1,
						title: "Todo 1",
						complete: false,
					},
					{
						id: 2,
						title: "Todo 2",
						complete: false,
					},
				];
				const reducer = (state, action) => {
					switch (action.type) {
						case "COMPLETE":
						return state.map((todo) => {
							if (todo.id === action.id) {
								return { ...todo, complete: !todo.complete };
							} else {
								return todo;
							}
						});
						default:
							return state;
					}
				};
				function Todos() {
					const [todos, dispatch] = useReducer(reducer, initialTodos);

					const handleComplete = (todo) => {
						dispatch({ type: "COMPLETE", id: todo.id });
					};
				  return (
					<>
						{todos.map((todo) => (
							<div key={todo.id}>
								<label>
									<input
										type="checkbox"
										checked={todo.complete}
										onChange={() => handleComplete(todo)}
									/>
									{todo.title}
								</label>
							</div>
						))}
					</>
					);
				}
				
				ReactDOM.render(<Todos />, document.getElementById("root"));
